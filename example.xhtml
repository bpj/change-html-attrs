<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by LibreOffice - see http://cgit.freedesktop.org/libreoffice/core/tree/filter/source/xslt for the code.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US"/><meta name="DCTERMS.title" content="" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.First_20_paragraph { font-size:12pt; font-family:Times New Roman; writing-mode:page; }
	.Heading_20_1 { font-size:115%; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Arial; writing-mode:page; font-weight:bold; }
	.Heading_20_2 { font-size:14pt; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Arial; writing-mode:page; font-style:italic; font-weight:bold; }
	.Heading_20_3 { font-size:14pt; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Arial; writing-mode:page; font-weight:bold; }
	.Heading_20_4 { font-size:85%; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Arial; writing-mode:page; font-style:italic; font-weight:bold; }
	.P1 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:center ! important; }
	.P10 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Courier New; writing-mode:page; }
	.P11 { font-size:12pt; margin-bottom:0cm; margin-top:0cm; font-family:Times New Roman; writing-mode:page; }
	.P12 { font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Courier New; writing-mode:page; }
	.P13 { font-size:10pt; margin-bottom:0cm; margin-top:0cm; font-family:Courier New; writing-mode:page; }
	.P3 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Times New Roman; writing-mode:page; }
	.P4 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Times New Roman; writing-mode:page; }
	.P5 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Times New Roman; writing-mode:page; font-weight:bold; }
	.P6 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Times New Roman; writing-mode:page; font-weight:bold; }
	.P7 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Times New Roman; writing-mode:page; }
	.P8 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Times New Roman; writing-mode:page; }
	.P9 { font-size:12pt; margin-bottom:0.152cm; margin-top:0.152cm; font-family:Times New Roman; writing-mode:page; }
	.Preformatted_20_Text { font-size:10pt; font-family:Courier New; writing-mode:page; margin-top:0cm; margin-bottom:0cm; }
	.Text_20_body { font-size:12pt; font-family:Times New Roman; writing-mode:page; margin-top:0.152cm; margin-bottom:0.152cm; }
	.Bullet_20_Symbols { font-family:StarSymbol; font-size:9pt; }
	.T1 { font-family:Courier New; }
	.T2 { font-style:italic; }
	<!-- ODF styles with no properties representable as CSS -->
	.Definition .Footnote_20_Symbol .Numbering_20_Symbols  { }
	</style></head><body dir="ltr" style="max-width:21.59cm;margin-top:2.54cm; margin-bottom:2.54cm; margin-left:2.54cm; margin-right:2.54cm; writing-mode:lr-tb; "><h1 class="Heading_20_1"><a id="a__NAME"><span style="margin-right:0.381cm;"/></a>NAME</h1><p class="First_20_paragraph">change-html-attrs.pl - change tags and attributes of elements based on their tags and elements</p><h1 class="Heading_20_1"><a id="a__SYNOPSIS"><span style="margin-right:0.381cm;"/></a>SYNOPSIS</h1><p class="Preformatted_20_Text">perl change-html-attrs.pl -c CONFIG-YAML [OPTIONS] [HTML-FILE...]</p><h1 class="Heading_20_1"><a id="a__DESCRIPTION"><span style="margin-right:0.381cm;"/></a>DESCRIPTION</h1><p class="First_20_paragraph"><span class="T1">change-html-attrs.pl</span> is a perl program which changes tags and attributes of HTML elements based on their tags and elements.</p><p class="Text_20_body">The program reads a YAML configuration file, then an HTML file, passed either as a filename or to <span class="T2">stdin</span>, modifies HTML elements based on criteria in the configuration file, converts the content back to HTML and writes it to <span class="T2">stdout</span>.</p><p class="Text_20_body">It is especially useful for correcting automatically generated (X)HTML as output by e.g. by the XHTML export filter of LibreOffice, which uses <span class="T1">&lt;span&gt;</span> elements with classes and a corresponding embedded CSS stylesheet with styles like <span class="T1">.T2 { font-style:italic; }</span> rather than <span class="T1">&lt;em&gt;</span> elements. I have been told (I'm on Linux) that Apple's TextUtil, at least when converting from RTF to HTML even replaces headers with styled <span class="T1">&lt;p&gt;</span> elements! Clearly these tools reflect the way the data are represented in the original format, whether ODF XML or RTF too shallowly.</p><p class="Text_20_body">Unfortunately the correspondence between class names and styles generated automatically by LibreOffice or an RTF writer is not constant, so one time you may get <span class="T1">.T2 { font-style:italic; }</span> and another time you get <span class="T1">.T5 { font-style:italic; }</span> or some other random, auto-generated class name for what should be an <span class="T1">&lt;em&gt;</span> element. To work around this you can use CSS property names and values as search criteria, and if the HTML file contains any <span class="T1">&lt;style&gt;</span> elements these will be analysed to identify classes, ids and/or tags corresponding to the specified CSS attributes and matching elements will be modified accordingly.</p><h1 class="Heading_20_1"><a id="a__OPTIONS"><span style="margin-right:0.381cm;"/></a>OPTIONS</h1><ul><li><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span><span class="T1">-c</span>, <span class="T1">-y</span>, <span class="T1">--config</span>, <span class="T1">--yaml</span> <span class="T2">FILE</span><span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>The YAML config file to use. See <a href="#the-yaml-config-file"><span class="Definition">"The YAML config file"</span></a> for its structure. This argument is required.<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span><span class="T1">-C</span>, <span class="T1">--css</span> <span class="T2">FILE</span> (Repeatable)<span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>A CSS stylesheet file to use for mapping CSS styles to HTML attributes, in addition to or instead of style sheet(s) embedded in the HTML file(s). This option can be given more than once for multiple files.<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span><span class="T1">-b</span>, <span class="T1">--body-only</span><span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Print out only the <span class="T1">&lt;body&gt;</span> of the HTML documents, with the <span class="T1">body</span> element name replaced by <span class="T1">div</span>.<span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>When used in conjunction with <span class="T1">--modify-in-place</span> this <span class="T2">will</span> lead to loss of any information in the <span class="T1">&lt;head&gt;</span>!<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span><span class="T1">-i</span>, <span class="T1">--modify-in-place</span> [<span class="T2">.EXTENSION</span>]<span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Write the modified HTML back to the original file after modification. The modified content will be UTF-8 encoded regardless of the original encoding and the <span class="T1">charset</span> attribute of any <span class="T1">&lt;meta http-equiv="Content-Type"&gt;</span> element will have been updated accordingly.<span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>When <span class="T2">.EXTENSION</span> is present the original file will be backed up to a file with <span class="T2">.EXTENSION</span> added to the filename.<span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>If possible it is recommended to keep your files in a local git repository and do the in-place modification in a fresh branch. If anything goes wrong you can do <span class="T1">git reset --hard</span> and return everything to the state before modification. When all is done and well you can merge the modification branch back into your main branch.<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span><span class="T1">-s</span>, <span class="T1">--stdout</span><span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>If both this option and <span class="T1">--modify-in-place</span> are true modified HTML will be written to <span class="T2">stdout</span> as well as to files.<span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>When <span class="T1">--modify-in-place</span> is false <span class="T1">--stdout</span> is implied and all output will go to <span class="T2">stdout</span>.<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span><span class="T1">-h</span>, <span class="T1">--help</span><span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Show the help text.<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span><span class="T1">-m</span>, <span class="T1">--man</span><span class="odfLiEnd"/> </p><p class="P3" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Show the entire manual.<span class="odfLiEnd"/> </p></li></ul><h1 class="Heading_20_1"><a id="a__USAGE"><span style="margin-right:0.381cm;"/></a>USAGE</h1><p class="First_20_paragraph">(For the format of the YAML configuration file see below!)</p><p class="Text_20_body">Apart from the <span class="T1">--config YAML_FILE</span> option which <span class="T2">must</span> be present the program takes any number of HTML file names as arguments, or reads a single file from <span class="T2">stdin</span>.</p><p class="Text_20_body">The files are processed separately but if the <span class="T1">--modify-in-place</span> option is not used they are all written to <span class="T2">stdout</span>.</p><p class="Text_20_body">When doing this the <span class="T1">--body-only</span> option is useful as it causes the <span class="T1">&lt;body&gt;</span> of each input document, if any, to be output as a <span class="T1">&lt;div&gt;</span>.</p><p class="Text_20_body">Each input file is scanned for <span class="T1">&lt;style&gt;</span> elements, which if found are processed against the <span class="T1">for_styles:</span> section of the config file, using any resulting conversions in the processing of the current document, in addition to (actually before) the conversions given in the <span class="T1">for_elements:</span> section of the config file and any conversions derived from CSS files given with the <span class="T1">--css</span> option.</p><ul><li><p class="P5" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>WARNING:<span class="odfLiEnd"/> </p><p class="P4" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>If the HTML is not UTF-8 encoded you <span class="T2">must</span> pass a filename, as second argument and charset information must be present in the content attribute of a <span class="T1">&lt;meta http-equiv="Content-Type"</span> tag in a possibly incomplete HTML document, which will be looked up using the "two step" algorithm specified by HTML5. It does not look for a BOM. Only the first 1024 bytes of the string are checked.<span class="odfLiEnd"/> </p></li></ul><p class="First_20_paragraph">The modified document will be converted back to HTML and written to <span class="T2">stdout</span> in UTF-8 encoding.</p><h2 class="Heading_20_2"><a id="a__The_YAML_configuration_file"><span style="margin-right:0.381cm;"/></a>The YAML configuration file</h2><p class="First_20_paragraph">The YAML configuration file should look something like this:</p><p class="Preformatted_20_Text">---</p><p class="Preformatted_20_Text">for_styles:</p><p class="Preformatted_20_Text">  # Inline code</p><p class="Preformatted_20_Text">  - from:   # Search criteria</p><p class="Preformatted_20_Text">      class: '/^T\d+$'          # Leading / indicates regular expression</p><p class="Preformatted_20_Text">      font-family: '/Courier'</p><p class="Preformatted_20_Text">    to:     # replacement values</p><p class="Preformatted_20_Text">      _tag: code</p><p class="Preformatted_20_Text">      # Null replacement value: delete the attribute</p><p class="Preformatted_20_Text">      class: ~      </p><p class="Preformatted_20_Text">  - from:</p><p class="Preformatted_20_Text">      class: '/^T\d+$'</p><p class="Preformatted_20_Text">      font-style: '/italic'</p><p class="Preformatted_20_Text">    to:</p><p class="Preformatted_20_Text">      _tag: em</p><p class="Preformatted_20_Text">  - from:</p><p class="Preformatted_20_Text">      class: '/^T\d+$'</p><p class="Preformatted_20_Text">      font-style: '/bold'</p><p class="Preformatted_20_Text">    to:</p><p class="Preformatted_20_Text">      _tag: strong</p><p class="Preformatted_20_Text">  # Block code</p><p class="Preformatted_20_Text">  - from:</p><p class="Preformatted_20_Text">      margin-top: '/\S'</p><p class="Preformatted_20_Text">      font-family: '/Courier'</p><p class="Preformatted_20_Text">    to:</p><p class="Preformatted_20_Text">      _tag: pre</p><p class="Preformatted_20_Text">      class: ~</p><p class="Preformatted_20_Text"> </p><p class="Preformatted_20_Text">for_elements:</p><p class="Preformatted_20_Text">  - from:</p><p class="Preformatted_20_Text">      _tag: p</p><p class="Preformatted_20_Text">    to:</p><p class="Preformatted_20_Text">      class: ~</p><p class="Preformatted_20_Text">  # Delete A elements without an href attribute</p><p class="Preformatted_20_Text">  - from:</p><p class="Preformatted_20_Text">      _tag: a</p><p class="Preformatted_20_Text">      # Null search value: the attribute must be nonexisting</p><p class="Preformatted_20_Text">      href: ~     </p><p class="Preformatted_20_Text">    to:</p><p class="Preformatted_20_Text">      CALL: delete    # Call a method on the HTML::Element object!</p><p class="Preformatted_20_Text">  # Delete classes from header elements</p><p class="Preformatted_20_Text">  - from:</p><p class="Preformatted_20_Text">      _tag: '/^h[1-6]$'</p><p class="Preformatted_20_Text">    to:</p><p class="Preformatted_20_Text">      class: ~</p><p class="First_20_paragraph">For the supported subset of YAML syntax see <a href="https://metacpan.org/pod/YAML::Tiny#YAML-TINY-SPECIFICATION"><span class="Definition">https://metacpan.org/pod/YAML::Tiny#YAML-TINY-SPECIFICATION</span></a></p><p class="Text_20_body">The structure of the configuration file is described below.</p><h3 class="Heading_20_3"><a id="a__for_styles__and_for_elements_"><span style="margin-right:0.381cm;"/></a><span class="T1">for_styles:</span> and <span class="T1">for_elements:</span></h3><p class="First_20_paragraph">The top level is a mapping with at least one of the keys <span class="T1">for_styles:</span> and <span class="T1">for_elements</span>, each with a list as value. If the top level is a list it is assigned to <span class="T1">for_elements:</span></p><p class="Text_20_body">Each of the values of <span class="T1">for_styles:</span> and <span class="T1">for_elements</span> is a list of mappings with two keys <span class="T1">from:</span> (the search criteria) and <span class="T1">to:</span> (the replacement values), each with a mapping as value.</p><h3 class="P12"><a id="a__from_"><span style="margin-right:0.381cm;"/></a>from:</h3><p class="First_20_paragraph">The <span class="T1">from:</span> mapping of the <span class="T1">for_elements:</span> list items have HTML attribute names as keys and plain strings or strings containing Perl regular expressions, or as explicitly null values specified with <span class="T1">~</span>, e.g. <span class="T1">href: ~</span>.</p><h4 class="Heading_20_4"><a id="a__Regular_expressions"><span style="margin-right:0.381cm;"/></a>Regular expressions</h4><p class="First_20_paragraph">Regular expressions are entered as normal strings and identified as regexes by a leading forward slash and an optional trailing slash followed by regular expression modifier letters: <span class="T1">/REGEX/MODIFIERS</span>, e.g. <span class="T1">/^P\d+$/i</span> which matches a string consisting of a <span class="T1">P</span> or <span class="T1">p</span> followed by one or more digits, <span class="T1">/^P\d+$/</span> being the format of an automatical paragraph style class in the output of LibreOffice's XHTML exporter. Note that strings containing regular expressions should normally be enclosed in single quotes to prevent that punctuation characters inside them are interpreted as YAML metacharacters.</p><p class="Text_20_body">If you are unfamiliar with regular expressions in general or Perl regular expressions in particular you can find increasingly in-depth information with the <span class="T1">perldoc</span> command line program:</p><p class="Preformatted_20_Text">$ perldoc perlrequick</p><p class="Preformatted_20_Text"> </p><p class="Preformatted_20_Text">$ perldoc perlretut</p><p class="Preformatted_20_Text"> </p><p class="Preformatted_20_Text">$ perldoc perlre</p><p class="First_20_paragraph">For the valid trailing modifiers see:</p><p class="Preformatted_20_Text">$ perldoc -f qr</p><h4 class="Heading_20_4"><a id="a__Element_selection"><span style="margin-right:0.381cm;"/></a>Element selection</h4><p class="First_20_paragraph">The search criteria select all elements where all the criteria in the <span class="T1">from:</span> mapping match the corresponding HTML attributes:</p><p class="Preformatted_20_Text">from:</p><p class="Preformatted_20_Text">    _tag:   span</p><p class="Preformatted_20_Text">    class:  '/\bfoo\b/'</p><p class="First_20_paragraph">selects all <span class="T1">&lt;span&gt;</span> elements with a class <span class="T1">foo</span>. Non-span elements or elements without a <span class="T1">foo</span> class are not selected.</p><p class="Text_20_body">The following rules apply for attribute value matching:</p><ul><li><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>Plain strings<span class="odfLiEnd"/> </p><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Must match exactly, i.e. the attribute value must be that exact string.<span class="odfLiEnd"/> </p></li><li><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>Regular expressions<span class="odfLiEnd"/> </p><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>The attribute value must match the regular expression. If you don't want to match a substring use the beginning-of-string and end-of-string anchors <span class="T1">^</span> and <span class="T1">$</span>.<span class="odfLiEnd"/> </p></li><li><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>Null search criterion values<span class="odfLiEnd"/> </p><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>The attribute must not be present in the element; thus <span class="T1">href: ~</span> will match elements without any <span class="T1">href</span> attribute.<span class="odfLiEnd"/> </p><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Note that there is a subtle difference between an null value and an empty string as search criterion values: the empty string will select elements where the value of the attribute in question <span class="T2">is</span> an empty string, while an null value will select elements where the attribute in question is missing.<span class="odfLiEnd"/> </p></li><li><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>The key <span class="T1">_tag:</span><span class="odfLiEnd"/> </p><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>The search criterion key <span class="T1">_tag:</span>, with a leading underscore, matches the <span class="T2">element name</span> rather than an attribute. Thus <span class="T1">_tag: span</span> will select <span class="T1">&lt;span&gt;</span> elements.<span class="odfLiEnd"/> </p></li><li><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>Classes<span class="odfLiEnd"/> </p><p class="P7" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Remember that classes are stored in a single string separated by whitespace. To match a single class enclose use a regular expressionand enclose the class name with <span class="T1">\b</span> anchors, or if the element should have only a single class with <span class="T1">^</span> and <span class="T1">$</span> anchors.<span class="odfLiEnd"/> </p></li></ul><h4 class="Heading_20_4"><a id="a__In_for_styles_"><span style="margin-right:0.381cm;"/></a>In <span class="T1">for_styles:</span></h4><p class="First_20_paragraph">The <span class="T1">from:</span> mappings of the <span class="T1">for_styles:</span> section are similar, except that</p><ol><li><p class="P11" style="margin-left:0.635cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">1.</span>You can use CSS attribute names and values as search criteria. Thus for example <span class="T1">font-family: '/Courier'</span> will match elements to which a style rule specifying Courier or Courier New as font-family apply.<span class="odfLiEnd"/> </p></li><li><p class="P11" style="margin-left:0.635cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">2.</span>The only HTML attributes you can match are <span class="T1">id</span>, <span class="T1">class</span> and the element-name 'attribute' <span class="T1">_tag</span>, namely as inferred from the CSS selectors, which are matched against the following regular expressions:<span class="odfLiEnd"/> </p><p class="P13" style="margin-left:0.635cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>_tag  : /(?&lt;!\S)([-\w]+)/<span class="odfLiEnd"/> </p><p class="P13" style="margin-left:0.635cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>id    : /\#([-\w]+)/<span class="odfLiEnd"/> </p><p class="P13" style="margin-left:0.635cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>class : /\.([-\w]+)/<span class="odfLiEnd"/> </p></li></ol><ul><li><p class="P6" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>NOTE:<span class="odfLiEnd"/> </p><p class="P8" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Style matching works by matching the <span class="T1">from:</span> criteria of the <span class="T1">for_styles</span> section against CSS style rules embedded in the HTML document and constructing <span class="T1">for_elements</span> criteria based on their selectors.<span class="odfLiEnd"/> </p><p class="P8" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Child selectors like <span class="T1">p.foo span.bar</span> do not work. Such rules are simply ignored. Comma-separated selectors like <span class="T1">p.foo, span.bar</span> <span class="T2">do</span> work, but all other selectors containing whitespace are ignored.<span class="odfLiEnd"/> </p></li></ul><h3 class="P12"><a id="a__to_"><span style="margin-right:0.381cm;"/></a>to:</h3><p class="First_20_paragraph"><span class="T1">to:</span> mappings simply specify string attribute values which should replace the old attribute values -- or the element name; the <span class="T1">_tag</span> 'attribute' is supported! A null value delete the attribute, so <span class="T1">class: ~</span> will remove the <span class="T1">class</span> attribute.</p><h4 class="Heading_20_4"><a id="a__For_Perl_users"><span style="margin-right:0.381cm;"/></a>For Perl users</h4><p class="First_20_paragraph">There is one possible key which does not just set an attribute string value, distinguished by being uppercase:</p><ul><li><p class="P10" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•.</span>CALL:<span class="odfLiEnd"/> </p><p class="P9" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>A list of lists, where the first item of the inner lists should be the name of an <a href="https://metacpan.org/pod/HTML::Element"><span class="Definition">HTML::Element</span></a> method to call on the object representing the element and the following items are arguments to the method if any.<span class="odfLiEnd"/> </p><p class="P9" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>As a special shortcut you can give a single method name like <span class="T1">CALL: delete</span> instead of a list of lists.<span class="odfLiEnd"/> </p><p class="P9" style="margin-left:0.635cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm"><!-- --></span>Please note that this feature has not been extensively tested: the only forms I have ever actually used are <span class="T1">CALL: delete</span> and <span class="T1">CALL: replace_with_content</span>! These are arguably the most useful ones.<span class="odfLiEnd"/> </p></li></ul><h1 class="Heading_20_1"><a id="a__AUTHOR"><span style="margin-right:0.381cm;"/></a>AUTHOR</h1><p class="First_20_paragraph">Benct Philip Jonsson <a href="mailto:bpjonsson@gmail.com"><span class="Definition">bpjonsson@gmail.com</span></a></p><h1 class="Heading_20_1"><a id="a__COPYRIGHT"><span style="margin-right:0.381cm;"/></a>COPYRIGHT</h1><p class="First_20_paragraph">Copyright 2015- Benct Philip Jonsson</p><h1 class="Heading_20_1"><a id="a__LICENSE"><span style="margin-right:0.381cm;"/></a>LICENSE</h1><p class="First_20_paragraph">This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p></body></html>